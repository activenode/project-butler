const wordlist = require("../../assets/wordlist");

module.exports.Project = class {
   _aliases;
   _autoGeneratedAlias;
   _index;
   _path;

   constructor(index, path, ...aliases) {
      this._index = index;
      this._path = path;
      this._autoGeneratedAlias = this._generateNamedAutoAlias(index);
      this._aliases = new Set(aliases);
   }

   _generateNamedAutoAlias(index) {
      const resultArray = [];
      const indexFragments = index.toString().split("");
      // Add animal name
      resultArray.push(wordlist.names[indexFragments.pop()]);
      // Append adjectives if necessary
      indexFragments.map((fragment) =>
         resultArray.unshift(wordlist.adjectives[fragment])
      );
      return resultArray.join("-");
   }

   /**
    * A small API to retrieve all meaningful aliases. This is different from the getter "aliases"!
    * @returns an accumulated list of all possible aliases to access this project
    */
   getAliases() {
      return [
         this._index.toString(),
         this._autoGeneratedAlias,
         ...this._aliases,
      ];
   }

   /**
    * A method to check whether a part of an identifier can be matched with this very project. Can be used to generate a list of "potentially" fitting projects.
    * @param {string} identifierFragment a fragment of an identifier to test whether it's part of an alias or the path
    * @returns
    */
   includes(identifierFragment) {
      return (
         this.path.includes(identifierFragment) ||
         this.getAliases().some((alias) => alias.includes(identifierFragment))
      );
   }

   /**
    * Does not return any auto generated aliases. Merely the value of the field holding the aliases as given by the user.
    * To get an accumulated list of all possible aliases to access this project use "getAliases()" instead.
    */
   get aliases() {
      return this._aliases;
   }

   get index() {
      return this._index;
   }

   get path() {
      return this._path;
   }
};
