const { Project } = require("./project");

describe.each`
   index  | result
   ${0}   | ${["0", "elk"]}
   ${1}   | ${["1", "ant"]}
   ${9}   | ${["9", "fox"]}
   ${10}  | ${["10", "fun-elk"]}
   ${19}  | ${["19", "fun-fox"]}
   ${20}  | ${["20", "dry-elk"]}
   ${29}  | ${["29", "dry-fox"]}
   ${100} | ${["100", "big-fun-elk"]}
`("Project", ({ index, result }) => {
   const project = new Project(index);
   test(`should hold aliases "${result}" for index ${index}`, () => {
      expect(project.getAliases()).toEqual(result);
   });
});

describe.each`
   index  | result
   ${20}  | ${["20", "dry-elk"]}
   ${29}  | ${["29", "dry-fox"]}
   ${100} | ${["100", "big-fun-elk"]}
`("Project", ({ index, result }) => {
   const project = new Project(index, "/", "foo", "bar");
   test(`should hold aliases "${[
      ...result,
      "foo",
      "bar",
   ]}" for index ${index}`, () => {
      expect(project.getAliases()).toEqual([...result, "foo", "bar"]);
   });
   test('should hold path "/"', () => {
      expect(project.path).toEqual("/");
   });
});

describe("includes", () => {
   const project = new Project(100, "/foo/bar", "foobar", "foo", "bar");
   test("should return true in case the fragment is part of the path", () => {
      const result = project.includes("/foo");
      expect(result).toBe(true);
   });
   test("should return true in case the fragment is part of an alias", () => {
      expect(project.includes("10")).toBe(true);
      expect(project.includes("foo")).toBe(true);
      expect(project.includes("bar")).toBe(true);
      expect(project.includes("foobar")).toBe(true);
   });
   test("should return false in case the fragment is not part of an alias nor the path", () => {
      expect(project.includes("foobarfoo")).toBe(false);
   });
});

describe("autoGeneratedAlias", () => {
   test("should hold no duplicates", () => {
      const namedAliases = [];
      for (let i = 0; i < 1000; i++) {
         namedAliases.push(new Project(i)._autoGeneratedAlias);
      }
      const uniqueNamedAliases = [...new Set(namedAliases)];
      expect(uniqueNamedAliases.length).toEqual(namedAliases.length);
   });
});

describe.each`
   index  | result
   ${0}   | ${"elk"}
   ${11}  | ${"fun-ant"}
   ${99}  | ${"hip-fox"}
   ${100} | ${"big-fun-elk"}
   ${110} | ${"fun-fun-elk"}
   ${999} | ${"hip-hip-fox"}
`("_generateNamedAutoAlias", ({ index, result }) => {
   test(`should return ${result} for index ${index}`, () => {
      const project = new Project(0);
      expect(project._generateNamedAutoAlias(index)).toEqual(result);
   });
});
