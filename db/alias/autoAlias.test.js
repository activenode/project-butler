const wordlist = require("../../assets/wordlist");
const { AutoGeneratedAlias } = require("./autoAlias");

fdescribe("_generateUniquePrefixes", () => {
   const autoGeneratedAlias = new AutoGeneratedAlias(0);
   test("Should return an empty array for adjectiveCount 0", () => {
      expect(autoGeneratedAlias._generateUniquePrefixes(0)).toEqual([]);
   });
   test("Should return all adjectives once postfixed with '-' for adjectiveCount 1", () => {
      const result = autoGeneratedAlias._generateUniquePrefixes(1);
      expect(result.length).toEqual(10);
      expect(result).toContain("big-", "fun-", "hip-");
      // Check whether alle entries are unique
      const uniquePrefixCombinations = [...new Set(result)];
      expect(uniquePrefixCombinations.length).toEqual(result.length);
   });
   test("Should return 100 unique adjective-combinations for adjectiveCount 2", () => {
      const result = autoGeneratedAlias._generateUniquePrefixes(2);
      expect(result.length).toEqual(100);
      expect(result).toContain("big-fun-", "fun-fun-", "hip-big-");
      // Check whether alle entries are unique
      const uniquePrefixCombinations = [...new Set(result)];
      expect(uniquePrefixCombinations.length).toEqual(result.length);
   });
   test("Should return 1000 unique adjective-combinations for adjectiveCount 3", () => {
      const result = autoGeneratedAlias._generateUniquePrefixes(3);
      expect(result.length).toEqual(1000);
      expect(result).toContain(
         "big-fun-hip-",
         "fun-fun-dry-",
         "hip-big-big-",
         "big-big-big-"
      );
      // Check whether alle entries are unique
      const uniquePrefixCombinations = [...new Set(result)];
      expect(uniquePrefixCombinations.length).toEqual(result.length);
   });
});

fdescribe("_generateUniqueCodeNames", () => {
   const autoGeneratedAlias = new AutoGeneratedAlias(0);
   test("Should return list of names for adjective count 0", () => {
      expect(autoGeneratedAlias._generateUniqueCodeNames(0)).toEqual(
         wordlist.names
      );
   });
   test("Should return 198 unique items for adjective count 1", () => {
      const result = autoGeneratedAlias._generateUniqueCodeNames(1);
      expect(result).toContain(...wordlist.names);
      expect(result.length).toEqual(198);
      expect(result).toContain("big-hen", "fun-hen", "hip-fox");
      // Check whether alle entries are unique
      const uniqueNamedAliases = [...new Set(result)];
      expect(uniqueNamedAliases.length).toEqual(result.length);
   });
   test("Should return 1998 unique items for adjective count 2", () => {
      const result = autoGeneratedAlias._generateUniqueCodeNames(2);
      expect(result).toContain(...wordlist.names);
      expect(result.length).toEqual(1998);
      expect(result).toContain("big-hen", "fun-hen", "hip-fox");
      expect(result).toContain("big-big-hen", "fun-fun-hen", "hip-big-fox");
      // Check whether alle entries are unique
      const uniqueNamedAliases = [...new Set(result)];
      expect(uniqueNamedAliases.length).toEqual(result.length);
   });
   test("Should return 19998 unique items for adjective count 3", () => {
      const result = autoGeneratedAlias._generateUniqueCodeNames(3);
      expect(result).toContain(...wordlist.names);
      expect(result.length).toEqual(19998);
      expect(result).toContain("big-hen", "fun-hen", "hip-fox");
      expect(result).toContain("big-big-hen", "fun-fun-hen", "hip-big-fox");
      expect(result).toContain(
         "big-big-fun-hen",
         "fun-fun-hip-hen",
         "hip-big-dry-fox"
      );
      // Check whether alle entries are unique
      const uniqueNamedAliases = [...new Set(result)];
      expect(uniqueNamedAliases.length).toEqual(result.length);
   });
});

fdescribe.each`
   index  | result
   ${0}   | ${"elk"}
   ${1}   | ${"ant"}
   ${10}  | ${"hen"}
   ${17}  | ${"yak"}
   ${18}  | ${"big-elk"}
   ${19}  | ${"fun-ant"}
   ${28}  | ${"big-hen"}
   ${35}  | ${"pro-yak"}
   ${197} | ${"rad-yak"}
   ${198} | ${"fun-big-elk"}
`("AutoGeneratedAlias", ({ index, result }) => {
   const autoGeneratedAlias = new AutoGeneratedAlias(index);
   test(`Should hold alias "${index}" and alias "${result}" for index ${index}`, () => {
      expect(autoGeneratedAlias.numericAlias).toEqual(`${index}`);
      expect(autoGeneratedAlias.wordAlias).toEqual(result);
   });
});

fdescribe("foobar", () => {
   test("Should hold only unique values", () => {
      const namedAliases = [];
      for (let i = 0; i < 500; i++) {
         namedAliases.push(new AutoGeneratedAlias(i).wordAlias);
      }
      const uniqueNamedAliases = [...new Set(namedAliases)];
      console.log(JSON.stringify(namedAliases));
      expect(uniqueNamedAliases.length).toEqual(namedAliases.length);
   });
});

describe.each`
   index    | result
   ${0}     | ${0}
   ${17}    | ${0}
   ${18}    | ${1}
   ${197}   | ${1}
   ${198}   | ${2}
   ${1997}  | ${2}
   ${1998}  | ${3}
   ${19997} | ${3}
   ${19998} | ${4}
`("_calclulateAdjectiveCount", ({ index, result }) => {
   test(`should return ${result} for index ${index}`, () => {
      const autoGeneratedAlias = new AutoGeneratedAlias(0);
      expect(autoGeneratedAlias._calclulateAdjectiveCount(index)).toEqual(
         result
      );
   });
});

describe.each`
   index  | result
   ${0}   | ${"elk"}
   ${11}  | ${"bat"}
   ${18}  | ${"big-elk"}
   ${29}  | ${"fun-bat"}
   ${36}  | ${"fun-elk"}
   ${47}  | ${"dry-bat"}
   ${191} | ${"big-bat"}
   ${198} | ${"fun-big-elk"}
   ${207} | ${"big-hip-fox"}
   ${209} | ${"dry-fun-bat"}
`("_generateNamedAutoAlias", ({ index, result }) => {
   test(`should return ${result} for index ${index}`, () => {
      const autoGeneratedAlias = new AutoGeneratedAlias(0);
      expect(autoGeneratedAlias._generateNamedAutoAlias(index)).toEqual(result);
   });
});
