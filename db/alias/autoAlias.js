const { Alias } = require("./alias");
const wordlist = require("../../assets/wordlist");

/*
   names: ["elk", "ant", "cow", "pig"],
   adjectives: ["big", "fun"],
   0 elk
   1 ant
   2 cow
   3 pig
   4 big elk
   5 fun ant
   6 big cow
   7 fun pig
   8 fun elk
   9 big ant
   10 fun cow
   11 big pig

   index < count of names? => name
   index >= count of names? => index / count of names => wordlist_iteration
   wordlist_iteration - 1 => startIndex
   startIndex >= count of names? => startIndex / count of adjectives => adjective_iteration
   adjective_iteration - 1 => startIndex2
*/

module.exports.AutoGeneratedAlias = class {
   _numericAlias;
   _wordAlias;

   constructor(index) {
      this._numericAlias = new Alias(index);
      this._wordAlias = new Alias(this._generateNamedAutoAlias(index));
   }

   _algorithm(index) {
      let codeName = wordlist.names[index % wordlist.names.length];
      const adjectiveCount = this._adjectiveCount(index);
      const wordListIterationCount = Math.floor(index / wordlist.names.length);
      for (let i = 0; i < adjectiveCount; i++) {
         const adjectiveIndex =
            ((index % wordlist.names.length) % wordlist.adjectives.length) +
            (wordListIterationCount - 1);
         codeName = `${
            wordlist.adjectives[
               (adjectiveIndex % wordlist.adjectives.length) + i
            ]
         }-${codeName}`;
      }
      return codeName;
   }

   _adjectiveCount(index) {
      let count = 0;
      let upperLimit = wordlist.names.length;
      while (index >= upperLimit) {
         count++;
         upperLimit +=
            Math.pow(wordlist.adjectives.length, count) * wordlist.names.length;
      }
      return count;
   }

   _fooalgorithm(index) {
      const wordCount = wordlist.names.length;
      const adjectiveCount = wordlist.adjectives.length;
      const wordListIterationCount = Math.floor(index / wordCount);
      const sanitizedIndex = index % wordCount;
      const startIndex = wordListIterationCount - 1;
      const sanitizedAdjectiveIndex =
         (sanitizedIndex + startIndex) % adjectiveCount;
      const adjectiveIterationCount = Math.floor(startIndex / adjectiveCount);
      console.log({
         wordListIterationCount,
         sanitizedIndex,
         startIndex,
         sanitizedAdjectiveIndex,
         adjectiveIterationCount,
      });
      let prefix = "";
      for (let i = 0; i <= adjectiveIterationCount; i++) {
         prefix += `${
            wordlist.adjectives[(sanitizedAdjectiveIndex + i) % adjectiveCount]
         }-`;
      }
      return prefix + wordlist.names[sanitizedIndex];
   }

   _findRightIndex(index) {
      if (index >= wordlist.adjectives.length) {
         return this._findRightIndex(index % wordlist.adjectives.length);
      }
      return index;
   }

   _generateNamePrefix(index) {
      const countOfPrefixes = Math.floor(index / wordlist.names.length);
      let prefixString = "";
      for (let index = 0; index < countOfPrefixes; index++) {
         prefixString += `${wordlist.adjectives[this._findRightIndex(index)]} `;
      }
      return prefixString;
   }

   _generateNamedAutoAlias(index) {
      return `${this._generateNamePrefix(index)}${
         wordlist.names[index % wordlist.names.length]
      }`;
   }

   get numericAlias() {
      return this._numericAlias.value;
   }

   get wordAlias() {
      return this._wordAlias.value;
   }
};
