const { Alias } = require("./alias");
const wordlist = require("../../assets/wordlist");

/*
   names: ["elk", "ant", "cow", "pig"],
   adjectives: ["big", "fun"],
   0 elk
   1 ant
   2 cow
   3 pig
   4 big elk
   5 fun ant
   6 big cow
   7 fun pig
   8 fun elk
   9 big ant
   10 fun cow
   11 big pig

   index < count of names? => name
   index >= count of names? => index / count of names => wordlist_iteration
   wordlist_iteration - 1 => startIndex
   startIndex >= count of names? => startIndex / count of adjectives => adjective_iteration
   adjective_iteration - 1 => startIndex2
*/

module.exports.AutoGeneratedAlias = class {
   _numericAlias;
   _wordAlias;

   constructor(index) {
      this._numericAlias = new Alias(index);
      this._wordAlias = new Alias(this._generateNamedAutoAlias(index));
   }

   _generateNamedAutoAlias(index) {
      const adjectiveCount = this._calclulateAdjectiveCount(index);
      const uniqueCodeNames = this._generateUniqueCodeNames(adjectiveCount);
      return uniqueCodeNames[index];
   }

   _generateUniqueCodeNames(adjectiveCount) {
      let uniqueCodeNames = wordlist.names;
      if (adjectiveCount === 0) {
         return uniqueCodeNames;
      }

      for (
         let adjectiveIteration = 1;
         adjectiveIteration <= adjectiveCount;
         adjectiveIteration++
      ) {
         const prefixes = this._generateUniquePrefixes(adjectiveIteration);
         uniqueCodeNames = uniqueCodeNames.concat(
            prefixes.flatMap((prefix) =>
               wordlist.names.map((animalName) => prefix + animalName)
            )
         );
      }
      return uniqueCodeNames;
   }

   _generateUniquePrefixes(adjectiveCount) {
      if (!adjectiveCount) {
         return [];
      }
      let uniquePrefixes = wordlist.adjectives.map(
         (adjective) => `${adjective}-`
      );
      for (
         let adjectiveIteration = 1;
         adjectiveIteration < adjectiveCount;
         adjectiveIteration++
      ) {
         uniquePrefixes = uniquePrefixes.flatMap((currentCombination) =>
            wordlist.adjectives.map(
               (adjective) => `${adjective}-${currentCombination}`
            )
         );
      }
      return uniquePrefixes;
   }

   _fgenerateNamedAutoAlias(index) {
      let codeName = wordlist.names[index % wordlist.names.length];
      const adjectiveCount = this._calclulateAdjectiveCount(index);
      const wordListIterationCount = Math.floor(index / wordlist.names.length);
      for (let i = 0; i < adjectiveCount; i++) {
         const adjectiveIndex =
            (index % wordlist.names.length) % wordlist.adjectives.length;
         codeName = `${wordlist.adjectives[adjectiveIndex]}-${codeName}`;
      }
      return codeName;
   }

   _calclulateAdjectiveCount(index) {
      let count = 0;
      let upperLimit = wordlist.names.length;
      while (index >= upperLimit) {
         count++;
         upperLimit +=
            Math.pow(wordlist.adjectives.length, count) * wordlist.names.length;
      }
      return count;
   }

   get numericAlias() {
      return this._numericAlias.value;
   }

   get wordAlias() {
      return this._wordAlias.value;
   }
};
